name: Deploy
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main
  push:
    branches:
      - develop
      - qa
      - staging
      - prod

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    env:
      ENVIRONMENT: dev
    steps:
      - name: Checkout latest
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '16'
      - name: Set env to qa
        if: endsWith(github.ref, '/qa')
        run: |
          echo "ENVIRONMENT=qa" >> $GITHUB_ENV
      - name: Set env to staging
        if: endsWith(github.ref, '/staging')
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
      - name: Set env to prod
        if: endsWith(github.ref, '/prod')
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup Yarn Cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Lint
        run: yarn lint:nowarn
      - name: Run Unit Tests
        run: yarn test
      - name: Build the app
        run: yarn build
      - name: Bundlesize Check
        run: yarn bundlesize
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy Cloudformation Stacks
        run: aws cloudformation deploy --template-file 'aws/cloudformation.yaml' --stack-name ${{ secrets.AWS_CLOUDFORMATION_STACK_NAME }}-${{ env.ENVIRONMENT }} --parameter-overrides HostedZoneId=${{ secrets.AWS_HOSTED_ZONE_ID }} CertificateArn=${{ secrets.AWS_CERTIFICATE_ARN }} Env=${{ env.ENVIRONMENT }}
      - name: Deploy App to S3 + CloudFront
        run: |
          echo "Clearing bucket..."
          aws s3 rm s3://${{ secrets.AWS_S3_BUCKET_NAME }}-${{ env.ENVIRONMENT }} --recursive
          echo "Syncing app to bucket..."
          aws s3 sync ./dist s3://${{ secrets.AWS_S3_BUCKET_NAME }}-${{ env.ENVIRONMENT }}
      - name: Get CloudFront Distribution ID
        run: echo aws cloudformation list-exports --query 'Stacks[?StackName=='${{ secrets.AWS_CLOUDFORMATION_STACK_NAME }}'][].Outputs[?OutputKey==`CFDistribution`].OutputValue' --output text >> $GITHUB_ENV
